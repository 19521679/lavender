{"ast":null,"code":"import * as loginConst from \"../constrants/loginConst\"; // import * as myToast from \"../../../Common/helper/toastHelper\";\n\nimport Cookies from \"universal-cookie\";\nconst initialState = {\n  makhachhang: undefined\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case loginConst.POST_LOGIN:\n      {\n        return { ...state,\n          makhachhang: action.payload.data.value.makhachhang\n        };\n      }\n\n    case loginConst.POST_LOGIN_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        const cookies = new Cookies();\n        let dtoken = new Date();\n        dtoken.setTime(dtoken.getTime() + 60 * 60 * 1000);\n        cookies.set(\"token\", data.value.token, {\n          path: \"/\",\n          expires: dtoken,\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n        console.log(data);\n        let drefresh = new Date();\n        drefresh.setTime(drefresh.getTime() + 10 * 24 * 60 * 60 * 1000);\n        cookies.set(\"refreshtoken\", data.value.refreshtoken, {\n          path: \"/\",\n          expires: drefresh,\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n        return { ...state,\n          makhachhang: action.payload.data.value.makhachhang\n        };\n      }\n\n    case loginConst.POST_LOGIN_FAILED:\n      {\n        return { ...state\n        };\n      }\n\n    /* Refresh*/\n\n    case loginConst.POST_REFRESH:\n      {\n        return { ...state,\n          makhachhang: action.payload.data.value.makhachhang\n        };\n      }\n\n    case loginConst.POST_REFRESH_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        const cookies = new Cookies();\n        let dtoken = new Date();\n        dtoken.setTime(dtoken.getTime() + 60 * 60 * 1000);\n        cookies.set(\"token\", data.value.token, {\n          path: \"/\",\n          expires: dtoken,\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n        let drefresh = new Date();\n        drefresh.setTime(drefresh.getTime() + 10 * 24 * 60 * 60 * 1000);\n        cookies.set(\"refreshtoken\", data.value.refreshtoken, {\n          path: \"/\",\n          expires: drefresh,\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n        return { ...state,\n          makhachhang: action.payload.data.value.makhachhang\n        };\n      }\n\n    case loginConst.POST_REFRESH_FAILED:\n      {\n        return { ...state\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/khanhle/Documents/GitHub/web/lavender/src/Components/redux/reducers/login.js"],"names":["loginConst","Cookies","initialState","makhachhang","undefined","reducer","state","action","type","POST_LOGIN","payload","data","value","POST_LOGIN_SUCCESS","cookies","dtoken","Date","setTime","getTime","set","token","path","expires","httpOnly","secure","sameSite","console","log","drefresh","refreshtoken","POST_LOGIN_FAILED","POST_REFRESH","POST_REFRESH_SUCCESS","POST_REFRESH_FAILED"],"mappings":"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","sourcesContent":["import * as loginConst from \"../constrants/loginConst\";\n// import * as myToast from \"../../../Common/helper/toastHelper\";\nimport Cookies from \"universal-cookie\";\n\nconst initialState = {\n  makhachhang: undefined,\n};\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case loginConst.POST_LOGIN: {\n      return {\n        ...state,\n        makhachhang: action.payload.data.value.makhachhang,\n      };\n    }\n    case loginConst.POST_LOGIN_SUCCESS: {\n      const { data } = action.payload;\n      const cookies = new Cookies();\n      let dtoken = new Date();\n      dtoken.setTime(dtoken.getTime() + 60 * 60 * 1000);\n      cookies.set(\"token\", data.value.token, {\n        path: \"/\",\n        expires: dtoken,\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n      console.log(data)\n\n      let drefresh = new Date();\n      drefresh.setTime(drefresh.getTime() + 10 * 24 * 60 * 60 * 1000);\n      cookies.set(\"refreshtoken\", data.value.refreshtoken, {\n        path: \"/\",\n        expires: drefresh,\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n      return {\n        ...state,\n        makhachhang: action.payload.data.value.makhachhang,\n      };\n    }\n    case loginConst.POST_LOGIN_FAILED: {\n      return {\n        ...state,\n      };\n    }\n    /* Refresh*/\n    case loginConst.POST_REFRESH: {\n      return {\n        ...state,\n        makhachhang: action.payload.data.value.makhachhang,\n      };\n    }\n    case loginConst.POST_REFRESH_SUCCESS: {\n      const { data } = action.payload;\n      const cookies = new Cookies();\n      let dtoken = new Date();\n      dtoken.setTime(dtoken.getTime() + 60 * 60 * 1000);\n      cookies.set(\"token\", data.value.token, {\n        path: \"/\",\n        expires: dtoken,\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n\n      let drefresh = new Date();\n      drefresh.setTime(drefresh.getTime() + 10 * 24 * 60 * 60 * 1000);\n      cookies.set(\"refreshtoken\", data.value.refreshtoken, {\n        path: \"/\",\n        expires: drefresh,\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n      return {\n        ...state,\n        makhachhang: action.payload.data.value.makhachhang,\n      };\n    }\n    case loginConst.POST_REFRESH_FAILED: {\n      return {\n        ...state,\n      };\n    }\n    default:\n      return state;\n  }\n};\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}