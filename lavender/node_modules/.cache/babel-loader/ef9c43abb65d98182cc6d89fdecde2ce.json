{"ast":null,"code":"import * as loginApi from \"../../apis/login\";\nimport * as loginConst from \"../constrants/loginConst\";\nimport jwt from \"jwt-decode\";\nimport Cookies from \"universal-cookie\";\nexport const postLogin = () => {\n  return {\n    type: loginConst.POST_LOGIN\n  };\n};\nexport const postLoginSuccess = data => {\n  return {\n    type: loginConst.POST_LOGIN_SUCCESS,\n    payload: {\n      data: data\n    }\n  };\n};\nexport const postLoginFailed = error => {\n  return {\n    type: loginConst.POST_LOGIN_FAILED,\n    payload: {\n      error\n    }\n  };\n};\nexport const postLoginReport = req => {\n  return async dispatch => {\n    await loginApi.login(req).then(success => {\n      if (success.status === 200) {\n        dispatch(postLoginSuccess(success.data)); // const token = success.data;\n        // const user = jwt(token); // decode your token here\n      } else dispatch(postLoginFailed(success));\n    }).catch(error => {\n      dispatch(postLoginFailed(error));\n    });\n  };\n};\nexport const postRefresh = () => {\n  return {\n    type: loginConst.POST_LOGIN\n  };\n};\nexport const postRefreshSuccess = data => {\n  return {\n    type: loginConst.POST_LOGIN_SUCCESS,\n    payload: {\n      data: data\n    }\n  };\n};\nexport const postRefreshFailed = error => {\n  return {\n    type: loginConst.POST_LOGIN_FAILED,\n    payload: {\n      error\n    }\n  };\n};\nexport const postRefreshReport = token => {\n  return async dispatch => {\n    await loginApi.login(token).then(success => {\n      if (success.status === 200) {\n        dispatch(postLoginSuccess(success.data)); // const token = success.data;\n        // const user = jwt(token); // decode your token here\n      } else dispatch(postLoginFailed(success));\n    }).catch(error => {\n      dispatch(postLoginFailed(error));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/khanhle/Documents/GitHub/web/lavender/src/Components/redux/actions/loginAct.js"],"names":["loginApi","loginConst","jwt","Cookies","postLogin","type","POST_LOGIN","postLoginSuccess","data","POST_LOGIN_SUCCESS","payload","postLoginFailed","error","POST_LOGIN_FAILED","postLoginReport","req","dispatch","login","then","success","status","catch","postRefresh","postRefreshSuccess","postRefreshFailed","postRefreshReport","token"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,kBAA1B;AACA,OAAO,KAAKC,UAAZ,MAA4B,0BAA5B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEJ,UAAU,CAACK;AADZ,GAAP;AAGD,CAJM;AAKP,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,IAAU;AACxC,SAAO;AACLH,IAAAA,IAAI,EAAEJ,UAAU,CAACQ,kBADZ;AAELC,IAAAA,OAAO,EAAE;AACPF,MAAAA,IAAI,EAAEA;AADC;AAFJ,GAAP;AAMD,CAPM;AASP,OAAO,MAAMG,eAAe,GAAIC,KAAD,IAAW;AACxC,SAAO;AACLP,IAAAA,IAAI,EAAEJ,UAAU,CAACY,iBADZ;AAELH,IAAAA,OAAO,EAAE;AACPE,MAAAA;AADO;AAFJ,GAAP;AAMD,CAPM;AAQP,OAAO,MAAME,eAAe,GAAIC,GAAD,IAAS;AACtC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMhB,QAAQ,CACXiB,KADG,CACGF,GADH,EAEHG,IAFG,CAEGC,OAAD,IAAa;AACjB,UAAIA,OAAO,CAACC,MAAR,KAAmB,GAAvB,EAA4B;AAC1BJ,QAAAA,QAAQ,CAACT,gBAAgB,CAACY,OAAO,CAACX,IAAT,CAAjB,CAAR,CAD0B,CAE1B;AACA;AACD,OAJD,MAIOQ,QAAQ,CAACL,eAAe,CAACQ,OAAD,CAAhB,CAAR;AACR,KARG,EASHE,KATG,CASIT,KAAD,IAAW;AAChBI,MAAAA,QAAQ,CAACL,eAAe,CAACC,KAAD,CAAhB,CAAR;AACD,KAXG,CAAN;AAYD,GAbD;AAcD,CAfM;AAkBP,OAAO,MAAMU,WAAW,GAAG,MAAM;AAC/B,SAAO;AACLjB,IAAAA,IAAI,EAAEJ,UAAU,CAACK;AADZ,GAAP;AAGD,CAJM;AAKP,OAAO,MAAMiB,kBAAkB,GAAIf,IAAD,IAAU;AAC1C,SAAO;AACLH,IAAAA,IAAI,EAAEJ,UAAU,CAACQ,kBADZ;AAELC,IAAAA,OAAO,EAAE;AACPF,MAAAA,IAAI,EAAEA;AADC;AAFJ,GAAP;AAMD,CAPM;AASP,OAAO,MAAMgB,iBAAiB,GAAIZ,KAAD,IAAW;AAC1C,SAAO;AACLP,IAAAA,IAAI,EAAEJ,UAAU,CAACY,iBADZ;AAELH,IAAAA,OAAO,EAAE;AACPE,MAAAA;AADO;AAFJ,GAAP;AAMD,CAPM;AAQP,OAAO,MAAMa,iBAAiB,GAAIC,KAAD,IAAW;AAC1C,SAAO,MAAOV,QAAP,IAAoB;AACzB,UAAMhB,QAAQ,CACXiB,KADG,CACGS,KADH,EAEHR,IAFG,CAEGC,OAAD,IAAa;AACjB,UAAIA,OAAO,CAACC,MAAR,KAAmB,GAAvB,EAA4B;AAC1BJ,QAAAA,QAAQ,CAACT,gBAAgB,CAACY,OAAO,CAACX,IAAT,CAAjB,CAAR,CAD0B,CAE1B;AACA;AACD,OAJD,MAIOQ,QAAQ,CAACL,eAAe,CAACQ,OAAD,CAAhB,CAAR;AACR,KARG,EASHE,KATG,CASIT,KAAD,IAAW;AAChBI,MAAAA,QAAQ,CAACL,eAAe,CAACC,KAAD,CAAhB,CAAR;AACD,KAXG,CAAN;AAYD,GAbD;AAcD,CAfM","sourcesContent":["import * as loginApi from \"../../apis/login\";\nimport * as loginConst from \"../constrants/loginConst\";\nimport jwt from \"jwt-decode\";\nimport Cookies from \"universal-cookie\";\n\nexport const postLogin = () => {\n  return {\n    type: loginConst.POST_LOGIN,\n  };\n};\nexport const postLoginSuccess = (data) => {\n  return {\n    type: loginConst.POST_LOGIN_SUCCESS,\n    payload: {\n      data: data,\n    },\n  };\n};\n\nexport const postLoginFailed = (error) => {\n  return {\n    type: loginConst.POST_LOGIN_FAILED,\n    payload: {\n      error,\n    },\n  };\n};\nexport const postLoginReport = (req) => {\n  return async (dispatch) => {\n    await loginApi\n      .login(req)\n      .then((success) => {\n        if (success.status === 200) {\n          dispatch(postLoginSuccess(success.data));\n          // const token = success.data;\n          // const user = jwt(token); // decode your token here\n        } else dispatch(postLoginFailed(success));\n      })\n      .catch((error) => {\n        dispatch(postLoginFailed(error));\n      });\n  };\n};\n\n\nexport const postRefresh = () => {\n  return {\n    type: loginConst.POST_LOGIN,\n  };\n};\nexport const postRefreshSuccess = (data) => {\n  return {\n    type: loginConst.POST_LOGIN_SUCCESS,\n    payload: {\n      data: data,\n    },\n  };\n};\n\nexport const postRefreshFailed = (error) => {\n  return {\n    type: loginConst.POST_LOGIN_FAILED,\n    payload: {\n      error,\n    },\n  };\n};\nexport const postRefreshReport = (token) => {\n  return async (dispatch) => {\n    await loginApi\n      .login(token)\n      .then((success) => {\n        if (success.status === 200) {\n          dispatch(postLoginSuccess(success.data));\n          // const token = success.data;\n          // const user = jwt(token); // decode your token here\n        } else dispatch(postLoginFailed(success));\n      })\n      .catch((error) => {\n        dispatch(postLoginFailed(error));\n      });\n  };\n};"]},"metadata":{},"sourceType":"module"}