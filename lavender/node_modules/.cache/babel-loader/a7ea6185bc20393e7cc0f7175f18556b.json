{"ast":null,"code":"import * as loginConst from \"../constrants/loginConst\"; // import * as myToast from \"../../../Common/helper/toastHelper\";\n\nimport Cookies from \"universal-cookie\";\nconst cookie = new Cookies();\nconst initialState = {\n  makhachhang: undefined\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case loginConst.POST_LOGIN:\n      {\n        return { ...state,\n          makhachhang: action.payload.data.value.makhachhang\n        };\n      }\n\n    case loginConst.POST_LOGIN_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        console.log(data.value);\n        let dtoken = new Date();\n        dtoken.setTime(dtoken.getTime() + 60 * 60 * 1000);\n        cookie.set(\"token\", data.value.token, {\n          path: \"/\",\n          expires: dtoken,\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n\n        if (data.value.refreshtoken === undefined) {\n          cookie.remove(\"refreshtoken\");\n        } else {\n          let drefresh = new Date();\n          drefresh.setTime(drefresh.getTime() + 10 * 24 * 60 * 60 * 1000);\n          cookie.set(\"refreshtoken\", data.value.refreshtoken, {\n            path: \"/\",\n            expires: drefresh,\n            httpOnly: true,\n            secure: true,\n            sameSite: true\n          });\n        }\n\n        return { ...state,\n          makhachhang: action.payload.data.value.makhachhang\n        };\n      }\n\n    case loginConst.POST_LOGIN_FAILED:\n      {\n        cookie.remove(\"token\");\n        cookie.remove(\"refreshtoken\");\n        return { ...state\n        };\n      }\n\n    /* Refresh*/\n\n    case loginConst.POST_REFRESH:\n      {\n        return { ...state,\n          makhachhang: action.payload.data.value.makhachhang\n        };\n      }\n\n    case loginConst.POST_REFRESH_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        let dtoken = new Date();\n        dtoken.setTime(dtoken.getTime() + 60 * 60 * 1000);\n        cookie.set(\"token\", data.value.token, {\n          path: \"/\",\n          expires: dtoken,\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n        console.log(\"newfrtoken\" + data.value.refreshtoken);\n        let drefresh = new Date();\n        drefresh.setTime(drefresh.getTime() + 10 * 24 * 60 * 60 * 1000);\n        cookie.set(\"refreshtoken\", data.value.refreshtoken, {\n          path: \"/\",\n          expires: drefresh,\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n        return { ...state,\n          makhachhang: action.payload.data.value.makhachhang\n        };\n      }\n\n    case loginConst.POST_REFRESH_FAILED:\n      {\n        cookie.remove(\"token\");\n        cookie.remove(\"refreshtoken\");\n        return { ...state\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/khanhle/Documents/GitHub/web/lavender/src/Components/redux/reducers/login.js"],"names":["loginConst","Cookies","cookie","initialState","makhachhang","undefined","reducer","state","action","type","POST_LOGIN","payload","data","value","POST_LOGIN_SUCCESS","console","log","dtoken","Date","setTime","getTime","set","token","path","expires","httpOnly","secure","sameSite","refreshtoken","remove","drefresh","POST_LOGIN_FAILED","POST_REFRESH","POST_REFRESH_SUCCESS","POST_REFRESH_FAILED"],"mappings":"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","sourcesContent":["import * as loginConst from \"../constrants/loginConst\";\n// import * as myToast from \"../../../Common/helper/toastHelper\";\nimport Cookies from \"universal-cookie\";\nconst cookie = new Cookies();\nconst initialState = {\n  makhachhang: undefined,\n};\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case loginConst.POST_LOGIN: {\n      return {\n        ...state,\n        makhachhang: action.payload.data.value.makhachhang,\n      };\n    }\n    case loginConst.POST_LOGIN_SUCCESS: {\n      const { data } = action.payload;\n      \n      console.log(data.value)\n      let dtoken = new Date();\n      dtoken.setTime(dtoken.getTime() + 60 * 60 * 1000);\n      cookie.set(\"token\", data.value.token, {\n        path: \"/\",\n        expires: dtoken,\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n\n      if(data.value.refreshtoken===undefined){\n        cookie.remove(\"refreshtoken\")\n      }\n      else{\n        let drefresh = new Date();\n        drefresh.setTime(drefresh.getTime() + 10 * 24 * 60 * 60 * 1000);\n        cookie.set(\"refreshtoken\", data.value.refreshtoken, {\n          path: \"/\",\n          expires: drefresh,\n          httpOnly: true,\n          secure: true,\n          sameSite: true,\n        });\n      }\n\n      return {\n        ...state,\n        makhachhang: action.payload.data.value.makhachhang,\n      };\n    }\n    case loginConst.POST_LOGIN_FAILED: {\n      \n      cookie.remove(\"token\");\n      cookie.remove(\"refreshtoken\");\n      return {\n        ...state,\n      };\n    }\n    /* Refresh*/\n    case loginConst.POST_REFRESH: {\n      return {\n        ...state,\n        makhachhang: action.payload.data.value.makhachhang,\n      };\n    }\n    case loginConst.POST_REFRESH_SUCCESS: {\n      const { data } = action.payload;\n      let dtoken = new Date();\n      dtoken.setTime(dtoken.getTime() + 60 * 60 * 1000);\n      cookie.set(\"token\", data.value.token, {\n        path: \"/\",\n        expires: dtoken,\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n\n      console.log(\"newfrtoken\"+data.value.refreshtoken)\n\n      let drefresh = new Date();\n      drefresh.setTime(drefresh.getTime() + 10 * 24 * 60 * 60 * 1000);\n      cookie.set(\"refreshtoken\", data.value.refreshtoken, {\n        path: \"/\",\n        expires: drefresh,\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n      return {\n        ...state,\n        makhachhang: action.payload.data.value.makhachhang,\n      };\n    }\n    case loginConst.POST_REFRESH_FAILED: {\n      cookie.remove(\"token\");\n  cookie.remove(\"refreshtoken\");\n      return {\n        ...state,\n      };\n    }\n    default:\n      return state;\n  }\n};\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}