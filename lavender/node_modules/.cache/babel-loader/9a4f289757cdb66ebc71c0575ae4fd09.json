{"ast":null,"code":"import * as loginConst from \"../constrants/loginConst\"; // import * as myToast from \"../../../Common/helper/toastHelper\";\n\nimport Cookies from \"universal-cookie\";\nconst initialState = {\n  hasLogined: false,\n  email: \"\",\n  password: \"\",\n  customer: {}\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case loginConst.POST_LOGIN:\n      {\n        return { ...state,\n          hasLogined: false,\n          email: \"\",\n          password: \"\",\n          customer: {}\n        };\n      }\n\n    case loginConst.POST_LOGIN_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        const username = data.username;\n        const password = data.password;\n        console.log(data);\n        const cookies = new Cookies();\n        let d = new Date();\n        d.setTime(d.getTime() + 60 * 60 * 1000);\n        cookies.set(\"token\", data, {\n          path: \"/\",\n          expires: d,\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        }); // myToast.toastSucces(\"Đăng nhập thành công\");\n\n        return { ...state,\n          hasLogined: true,\n          email: data.email,\n          password: data.password,\n          customer: data\n        };\n      }\n\n    case loginConst.POST_LOGIN_FAILED:\n      {\n        // myToast.toastError(\"Đăng nhập thất bại\");\n        localStorage.setItem(\"hasLogined\", false);\n        return { ...state,\n          hasLogined: false,\n          email: \"\",\n          password: \"\",\n          customer: {}\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/khanhle/Documents/GitHub/web/lavender/src/Components/redux/reducers/login.js"],"names":["loginConst","Cookies","initialState","hasLogined","email","password","customer","reducer","state","action","type","POST_LOGIN","POST_LOGIN_SUCCESS","data","payload","username","console","log","cookies","d","Date","setTime","getTime","set","path","expires","httpOnly","secure","sameSite","POST_LOGIN_FAILED","localStorage","setItem"],"mappings":"AAAA,OAAO,KAAKA,UAAZ,MAA4B,0BAA5B,C,CACA;;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,QAAQ,EAAE,EAHS;AAInBC,EAAAA,QAAQ,EAAE;AAJS,CAArB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,UAAU,CAACW,UAAhB;AAA4B;AAC1B,eAAO,EACL,GAAGH,KADE;AAELL,UAAAA,UAAU,EAAE,KAFP;AAGLC,UAAAA,KAAK,EAAE,EAHF;AAILC,UAAAA,QAAQ,EAAE,EAJL;AAKLC,UAAAA,QAAQ,EAAE;AALL,SAAP;AAOD;;AACD,SAAKN,UAAU,CAACY,kBAAhB;AAAoC;AAClC,cAAM;AAAEC,UAAAA;AAAF,YAAWJ,MAAM,CAACK,OAAxB;AACA,cAAMC,QAAQ,GAAGF,IAAI,CAACE,QAAtB;AACA,cAAMV,QAAQ,GAAGQ,IAAI,CAACR,QAAtB;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEA,cAAMK,OAAO,GAAG,IAAIjB,OAAJ,EAAhB;AAEA,YAAIkB,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACAD,QAAAA,CAAC,CAACE,OAAF,CAAUF,CAAC,CAACG,OAAF,KAAc,KAAK,EAAL,GAAU,IAAlC;AACAJ,QAAAA,OAAO,CAACK,GAAR,CAAY,OAAZ,EAAqBV,IAArB,EAA2B;AACzBW,UAAAA,IAAI,EAAE,GADmB;AAEzBC,UAAAA,OAAO,EAAEN,CAFgB;AAGzBO,UAAAA,QAAQ,EAAE,IAHe;AAIzBC,UAAAA,MAAM,EAAE,IAJiB;AAKzBC,UAAAA,QAAQ,EAAE;AALe,SAA3B,EAVkC,CAkBlC;;AACA,eAAO,EACL,GAAGpB,KADE;AAELL,UAAAA,UAAU,EAAE,IAFP;AAGLC,UAAAA,KAAK,EAAES,IAAI,CAACT,KAHP;AAILC,UAAAA,QAAQ,EAAEQ,IAAI,CAACR,QAJV;AAKLC,UAAAA,QAAQ,EAAEO;AALL,SAAP;AAOD;;AACD,SAAKb,UAAU,CAAC6B,iBAAhB;AAAmC;AACjC;AACAC,QAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmC,KAAnC;AACA,eAAO,EACL,GAAGvB,KADE;AAELL,UAAAA,UAAU,EAAE,KAFP;AAGLC,UAAAA,KAAK,EAAE,EAHF;AAILC,UAAAA,QAAQ,EAAE,EAJL;AAKLC,UAAAA,QAAQ,EAAE;AALL,SAAP;AAOD;;AACD;AACE,aAAOE,KAAP;AAjDJ;AAmDD,CApDD;;AAqDA,eAAeD,OAAf","sourcesContent":["import * as loginConst from \"../constrants/loginConst\";\n// import * as myToast from \"../../../Common/helper/toastHelper\";\nimport Cookies from \"universal-cookie\";\n\nconst initialState = {\n  hasLogined: false,\n  email: \"\",\n  password: \"\",\n  customer: {},\n};\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case loginConst.POST_LOGIN: {\n      return {\n        ...state,\n        hasLogined: false,\n        email: \"\",\n        password: \"\",\n        customer: {},\n      };\n    }\n    case loginConst.POST_LOGIN_SUCCESS: {\n      const { data } = action.payload;\n      const username = data.username;\n      const password = data.password;\n      console.log(data);\n\n      const cookies = new Cookies();\n\n      let d = new Date();\n      d.setTime(d.getTime() + 60 * 60 * 1000);\n      cookies.set(\"token\", data, {\n        path: \"/\",\n        expires: d,\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n\n      // myToast.toastSucces(\"Đăng nhập thành công\");\n      return {\n        ...state,\n        hasLogined: true,\n        email: data.email,\n        password: data.password,\n        customer: data,\n      };\n    }\n    case loginConst.POST_LOGIN_FAILED: {\n      // myToast.toastError(\"Đăng nhập thất bại\");\n      localStorage.setItem(\"hasLogined\", false);\n      return {\n        ...state,\n        hasLogined: false,\n        email: \"\",\n        password: \"\",\n        customer: {},\n      };\n    }\n    default:\n      return state;\n  }\n};\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}