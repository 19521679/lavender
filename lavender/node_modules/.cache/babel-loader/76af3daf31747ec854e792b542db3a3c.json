{"ast":null,"code":"var _jsxFileName = \"/Users/khanhle/Documents/GitHub/web/lavender/src/Common/helper/carousel/js/EmblaCarousel.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport EmblaCarouselReact from \"embla-carousel-react\";\nimport useInterval from \"./useInterval\";\nimport { DotButton, PrevButton, NextButton } from \"./EmblaCarouselButtons\";\nimport \"../css/embla.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EmblaCarouselComponent = ({\n  autoplay,\n  delayLength,\n  children\n}) => {\n  _s();\n\n  const [embla, setEmbla] = useState(null);\n  const [prevBtnEnabled, setPrevBtnEnabled] = useState(false);\n  const [nextBtnEnabled, setNextBtnEnabled] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [scrollSnaps, setScrollSnaps] = useState([]);\n  const [delay, setDelay] = useState(delayLength);\n  const [isRunning, setIsRunning] = useState(autoplay);\n  const scrollTo = useCallback(index => embla.scrollTo(index), [embla]);\n  const scrollPrev = useCallback(() => embla.scrollPrev(), [embla]);\n  const scrollNext = useCallback(() => embla.scrollNext(), [embla]);\n  useInterval(() => {\n    if (selectedIndex === scrollSnaps.length - 1) {\n      scrollTo(0);\n    } else {\n      scrollNext();\n    }\n  }, isRunning ? delay : null);\n  useEffect(() => {\n    const onSelect = () => {\n      setSelectedIndex(embla.selectedScrollSnap());\n      setPrevBtnEnabled(embla.canScrollPrev());\n      setNextBtnEnabled(embla.canScrollNext());\n    };\n\n    if (embla) {\n      setScrollSnaps(embla.scrollSnapList());\n      embla.on(\"select\", onSelect);\n      onSelect();\n    }\n  }, [embla]);\n\n  function handleIsRunningChange(e) {\n    setIsRunning(e.target.checked);\n  }\n\n  function handleDelayChange(e) {\n    setDelay(Number(e.target.value));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"embla\",\n      children: [/*#__PURE__*/_jsxDEV(EmblaCarouselReact, {\n        className: \"embla__viewport\",\n        emblaRef: setEmbla,\n        options: {\n          loop: false\n        },\n        htmlTagName: \"div\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"embla__container\",\n          children: children.map((Child, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"embla__slide\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"embla__slide__inner\",\n              children: Child\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"embla__dots\",\n        children: scrollSnaps.map((snap, index) => /*#__PURE__*/_jsxDEV(DotButton, {\n          selected: index === selectedIndex,\n          onClick: () => scrollTo(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrevButton, {\n        onClick: scrollPrev,\n        enabled: prevBtnEnabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NextButton, {\n        onClick: scrollNext,\n        enabled: nextBtnEnabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autoplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: isRunning,\n        onChange: handleIsRunningChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), \" \", \"autoplay\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), \"delay: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        value: delay,\n        onChange: handleDelayChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EmblaCarouselComponent, \"VqxkcXyn18t0swDYTWOnmCKJ+0M=\", false, function () {\n  return [useInterval];\n});\n\n_c = EmblaCarouselComponent;\nexport default EmblaCarouselComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmblaCarouselComponent\");","map":{"version":3,"sources":["/Users/khanhle/Documents/GitHub/web/lavender/src/Common/helper/carousel/js/EmblaCarousel.js"],"names":["React","useState","useEffect","useCallback","EmblaCarouselReact","useInterval","DotButton","PrevButton","NextButton","EmblaCarouselComponent","autoplay","delayLength","children","embla","setEmbla","prevBtnEnabled","setPrevBtnEnabled","nextBtnEnabled","setNextBtnEnabled","selectedIndex","setSelectedIndex","scrollSnaps","setScrollSnaps","delay","setDelay","isRunning","setIsRunning","scrollTo","index","scrollPrev","scrollNext","length","onSelect","selectedScrollSnap","canScrollPrev","canScrollNext","scrollSnapList","on","handleIsRunningChange","e","target","checked","handleDelayChange","Number","value","loop","map","Child","snap"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport EmblaCarouselReact from \"embla-carousel-react\";\nimport useInterval from \"./useInterval\";\nimport { DotButton, PrevButton, NextButton } from \"./EmblaCarouselButtons\";\nimport \"../css/embla.css\";\n\nconst EmblaCarouselComponent = ({ autoplay, delayLength, children }) => {\n  const [embla, setEmbla] = useState(null);\n  const [prevBtnEnabled, setPrevBtnEnabled] = useState(false);\n  const [nextBtnEnabled, setNextBtnEnabled] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [scrollSnaps, setScrollSnaps] = useState([]);\n  const [delay, setDelay] = useState(delayLength);\n  const [isRunning, setIsRunning] = useState(autoplay);\n\n  const scrollTo = useCallback(index => embla.scrollTo(index), [embla]);\n  const scrollPrev = useCallback(() => embla.scrollPrev(), [embla]);\n  const scrollNext = useCallback(() => embla.scrollNext(), [embla]);\n\n  useInterval(\n    () => {\n      if (selectedIndex === scrollSnaps.length - 1) {\n        scrollTo(0);\n      } else {\n        scrollNext();\n      }\n    },\n    isRunning ? delay : null\n  );\n\n  useEffect(() => {\n    const onSelect = () => {\n      setSelectedIndex(embla.selectedScrollSnap());\n      setPrevBtnEnabled(embla.canScrollPrev());\n      setNextBtnEnabled(embla.canScrollNext());\n    };\n    if (embla) {\n      setScrollSnaps(embla.scrollSnapList());\n      embla.on(\"select\", onSelect);\n      onSelect();\n    }\n  }, [embla]);\n\n  function handleIsRunningChange(e) {\n    setIsRunning(e.target.checked);\n  }\n\n  function handleDelayChange(e) {\n    setDelay(Number(e.target.value));\n  }\n\n  return (\n    <div>\n      <div className=\"embla\">\n        <EmblaCarouselReact\n          className=\"embla__viewport\"\n          emblaRef={setEmbla}\n          options={{ loop: false }}\n          htmlTagName=\"div\"\n        >\n          <div className=\"embla__container\">\n            {children.map((Child, index) => (\n              <div className=\"embla__slide\" key={index}>\n                <div className=\"embla__slide__inner\">{Child}</div>\n              </div>\n            ))}\n          </div>\n        </EmblaCarouselReact>\n        <div className=\"embla__dots\">\n          {scrollSnaps.map((snap, index) => (\n            <DotButton\n              selected={index === selectedIndex}\n              onClick={() => scrollTo(index)}\n              key={index}\n            />\n          ))}\n        </div>\n        <PrevButton onClick={scrollPrev} enabled={prevBtnEnabled} />\n        <NextButton onClick={scrollNext} enabled={nextBtnEnabled} />\n      </div>\n      <div className=\"autoplay\">\n        <input\n          type=\"checkbox\"\n          checked={isRunning}\n          onChange={handleIsRunningChange}\n        />{\" \"}\n        autoplay\n        <br />\n        delay: <input value={delay} onChange={handleDelayChange} />\n      </div>\n    </div>\n  );\n};\n\nexport default EmblaCarouselComponent;\n"]},"metadata":{},"sourceType":"module"}