{"ast":null,"code":"var defaultOptions = {\n  delay: 4000,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false\n};\n\nfunction Autoplay(userOptions, userNode) {\n  var options = Object.assign({}, defaultOptions, userOptions);\n  var stopOnInteraction = options.stopOnInteraction,\n      stopOnMouseEnter = options.stopOnMouseEnter,\n      stopOnLastSnap = options.stopOnLastSnap,\n      delay = options.delay;\n  var carousel;\n  var mouseEntered = false;\n  var timer = 0;\n\n  function init(embla) {\n    carousel = embla;\n    var eventStore = carousel.internalEngine().eventStore;\n    var emblaRoot = carousel.rootNode();\n    var root = userNode && userNode(emblaRoot) || emblaRoot;\n    carousel.on('init', play);\n    carousel.on('pointerDown', stop);\n    carousel.on('pointerUp', reset);\n\n    if (stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', function () {\n        mouseEntered = true;\n        stop();\n      });\n      eventStore.add(root, 'mouseleave', function () {\n        mouseEntered = false;\n        reset();\n      });\n    }\n  }\n\n  function destroy() {\n    carousel.off('init', play);\n    carousel.off('pointerDown', stop);\n    carousel.off('pointerUp', reset);\n    mouseEntered = false;\n    stop();\n  }\n\n  function play() {\n    stop();\n    requestAnimationFrame(function () {\n      timer = window.setTimeout(next, delay);\n    });\n  }\n\n  function stop() {\n    if (!timer) return;\n    window.clearTimeout(timer);\n    timer = 0;\n  }\n\n  function reset() {\n    stop();\n    if (stopOnMouseEnter && mouseEntered) return;\n    if (!stopOnInteraction) play();\n  }\n\n  function next() {\n    var index = carousel.internalEngine().index;\n    var proceed = index.get() !== index.max || !stopOnLastSnap;\n    if (!proceed) return;\n\n    if (carousel.canScrollNext()) {\n      carousel.scrollNext();\n    } else {\n      carousel.scrollTo(0);\n    }\n\n    play();\n  }\n\n  var self = {\n    name: 'Autoplay',\n    options: options,\n    init: init,\n    destroy: destroy,\n    play: play,\n    stop: stop,\n    reset: reset\n  };\n  return self;\n}\n\nexport default Autoplay;","map":{"version":3,"sources":["src/components/Options.ts","src/components/index.ts"],"names":["defaultOptions","delay","stopOnInteraction","stopOnMouseEnter","stopOnLastSnap","options","Object","mouseEntered","timer","carousel","emblaRoot","root","userNode","eventStore","stop","reset","requestAnimationFrame","window","play","proceed","index","self","name","init","destroy"],"mappings":"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","sourcesContent":["export type OptionsType = {\n  delay: number\n  stopOnInteraction: boolean\n  stopOnMouseEnter: boolean\n  stopOnLastSnap: boolean\n}\n\nexport const defaultOptions: OptionsType = {\n  delay: 4000,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n}\n\nexport type AutoplayOptionsType = Partial<OptionsType>\n","import { defaultOptions, AutoplayOptionsType, OptionsType } from './Options'\nimport { EmblaCarouselType, EmblaPluginType } from 'embla-carousel'\n\nexport type AutoplayType = EmblaPluginType<OptionsType> & {\n  play: () => void\n  stop: () => void\n  reset: () => void\n}\n\nfunction Autoplay(\n  userOptions?: AutoplayOptionsType,\n  userNode?: (emblaRoot: HTMLElement) => HTMLElement | null,\n): AutoplayType {\n  const options = Object.assign({}, defaultOptions, userOptions)\n  const { stopOnInteraction, stopOnMouseEnter, stopOnLastSnap, delay } = options\n  let carousel: EmblaCarouselType\n  let mouseEntered = false\n  let timer = 0\n\n  function init(embla: EmblaCarouselType): void {\n    carousel = embla\n    const { eventStore } = carousel.internalEngine()\n    const emblaRoot = carousel.rootNode()\n    const root = (userNode && userNode(emblaRoot)) || emblaRoot\n\n    carousel.on('init', play)\n    carousel.on('pointerDown', stop)\n    carousel.on('pointerUp', reset)\n\n    if (stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', () => {\n        mouseEntered = true\n        stop()\n      })\n      eventStore.add(root, 'mouseleave', () => {\n        mouseEntered = false\n        reset()\n      })\n    }\n  }\n\n  function destroy(): void {\n    carousel.off('init', play)\n    carousel.off('pointerDown', stop)\n    carousel.off('pointerUp', reset)\n    mouseEntered = false\n    stop()\n  }\n\n  function play(): void {\n    stop()\n    requestAnimationFrame(() => {\n      timer = window.setTimeout(next, delay)\n    })\n  }\n\n  function stop(): void {\n    if (!timer) return\n    window.clearTimeout(timer)\n    timer = 0\n  }\n\n  function reset(): void {\n    stop()\n    if (stopOnMouseEnter && mouseEntered) return\n    if (!stopOnInteraction) play()\n  }\n\n  function next(): void {\n    const { index } = carousel.internalEngine()\n    const proceed = index.get() !== index.max || !stopOnLastSnap\n\n    if (!proceed) return\n\n    if (carousel.canScrollNext()) {\n      carousel.scrollNext()\n    } else {\n      carousel.scrollTo(0)\n    }\n    play()\n  }\n\n  const self: AutoplayType = {\n    name: 'Autoplay',\n    options,\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n  }\n  return self\n}\n\nexport default Autoplay\n"]},"metadata":{},"sourceType":"module"}