{"ast":null,"code":"import * as loginApi from \"../apis/login\";\nimport Cookies from \"universal-cookie\";\nexport const refreshToken = async refreshtoken => {\n  var cookie = new Cookies();\n  var newojtoken = undefined;\n  await loginApi.refreshToken(refreshtoken).then(success => {\n    if (success.status === 200) newojtoken = success.data.value;else newojtoken = undefined;\n  }).catch(() => {\n    newojtoken = undefined;\n  });\n\n  if (newojtoken !== undefined) {\n    let dtoken = new Date();\n    dtoken.setTime(dtoken.getTime() + 60 * 60 * 1000);\n    cookie.set(\"token\", newojtoken.token, {\n      path: \"/\",\n      expires: dtoken,\n      httpOnly: true,\n      secure: true,\n      sameSite: true\n    });\n    let drefresh = new Date();\n    drefresh.setTime(drefresh.getTime() + 10 * 24 * 60 * 60 * 1000);\n    cookie.set(\"refreshtoken\", newojtoken.refreshtoken, {\n      path: \"/\",\n      expires: drefresh,\n      httpOnly: true,\n      secure: true,\n      sameSite: true\n    });\n    return newojtoken.token;\n  }\n\n  cookie.set(\"token\", \"\", {\n    path: \"/\",\n    httpOnly: true,\n    secure: true,\n    sameSite: true\n  });\n  cookie.set(\"refreshtoken\", \"\", {\n    path: \"/\",\n    httpOnly: true,\n    secure: true,\n    sameSite: true\n  });\n};","map":{"version":3,"sources":["/Users/khanhle/Documents/GitHub/web/lavender/src/Components/service/refreshtoken.js"],"names":["loginApi","Cookies","refreshToken","refreshtoken","cookie","newojtoken","undefined","then","success","status","data","value","catch","dtoken","Date","setTime","getTime","set","token","path","expires","httpOnly","secure","sameSite","drefresh"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,eAA1B;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAOC,YAAP,IAAwB;AAClD,MAAIC,MAAM,GAAG,IAAIH,OAAJ,EAAb;AACA,MAAII,UAAU,GAAGC,SAAjB;AACA,QAAMN,QAAQ,CACXE,YADG,CACUC,YADV,EAEHI,IAFG,CAEGC,OAAD,IAAa;AACjB,QAAIA,OAAO,CAACC,MAAR,KAAmB,GAAvB,EAA4BJ,UAAU,GAAGG,OAAO,CAACE,IAAR,CAAaC,KAA1B,CAA5B,KACKN,UAAU,GAAGC,SAAb;AACN,GALG,EAMHM,KANG,CAMG,MAAM;AACTP,IAAAA,UAAU,GAAGC,SAAb;AACH,GARG,CAAN;;AASA,MAAID,UAAU,KAAKC,SAAnB,EAA8B;AAC5B,QAAIO,MAAM,GAAG,IAAIC,IAAJ,EAAb;AACAD,IAAAA,MAAM,CAACE,OAAP,CAAeF,MAAM,CAACG,OAAP,KAAmB,KAAK,EAAL,GAAU,IAA5C;AACAZ,IAAAA,MAAM,CAACa,GAAP,CAAW,OAAX,EAAoBZ,UAAU,CAACa,KAA/B,EAAsC;AACpCC,MAAAA,IAAI,EAAE,GAD8B;AAEpCC,MAAAA,OAAO,EAAEP,MAF2B;AAGpCQ,MAAAA,QAAQ,EAAE,IAH0B;AAIpCC,MAAAA,MAAM,EAAE,IAJ4B;AAKpCC,MAAAA,QAAQ,EAAE;AAL0B,KAAtC;AAQA,QAAIC,QAAQ,GAAG,IAAIV,IAAJ,EAAf;AACAU,IAAAA,QAAQ,CAACT,OAAT,CAAiBS,QAAQ,CAACR,OAAT,KAAqB,KAAK,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB,IAA1D;AACAZ,IAAAA,MAAM,CAACa,GAAP,CAAW,cAAX,EAA2BZ,UAAU,CAACF,YAAtC,EAAoD;AAClDgB,MAAAA,IAAI,EAAE,GAD4C;AAElDC,MAAAA,OAAO,EAAEI,QAFyC;AAGlDH,MAAAA,QAAQ,EAAE,IAHwC;AAIlDC,MAAAA,MAAM,EAAE,IAJ0C;AAKlDC,MAAAA,QAAQ,EAAE;AALwC,KAApD;AAOA,WAAOlB,UAAU,CAACa,KAAlB;AACD;;AACDd,EAAAA,MAAM,CAACa,GAAP,CAAW,OAAX,EAAoB,EAApB,EAAwB;AACtBE,IAAAA,IAAI,EAAE,GADgB;AAEtBE,IAAAA,QAAQ,EAAE,IAFY;AAGtBC,IAAAA,MAAM,EAAE,IAHc;AAItBC,IAAAA,QAAQ,EAAE;AAJY,GAAxB;AAMAnB,EAAAA,MAAM,CAACa,GAAP,CAAW,cAAX,EAA2B,EAA3B,EAA+B;AAC7BE,IAAAA,IAAI,EAAE,GADuB;AAE7BE,IAAAA,QAAQ,EAAE,IAFmB;AAG7BC,IAAAA,MAAM,EAAE,IAHqB;AAI7BC,IAAAA,QAAQ,EAAE;AAJmB,GAA/B;AAMD,CA9CM","sourcesContent":["import * as loginApi from \"../apis/login\";\nimport Cookies from \"universal-cookie\";\n\nexport const refreshToken = async (refreshtoken) => {\n  var cookie = new Cookies();\n  var newojtoken = undefined;\n  await loginApi\n    .refreshToken(refreshtoken)\n    .then((success) => {\n      if (success.status === 200) newojtoken = success.data.value;\n      else newojtoken = undefined;\n    })\n    .catch(() => {\n        newojtoken = undefined;\n    });\n  if (newojtoken !== undefined) {\n    let dtoken = new Date();\n    dtoken.setTime(dtoken.getTime() + 60 * 60 * 1000);\n    cookie.set(\"token\", newojtoken.token, {\n      path: \"/\",\n      expires: dtoken,\n      httpOnly: true,\n      secure: true,\n      sameSite: true,\n    });\n\n    let drefresh = new Date();\n    drefresh.setTime(drefresh.getTime() + 10 * 24 * 60 * 60 * 1000);\n    cookie.set(\"refreshtoken\", newojtoken.refreshtoken, {\n      path: \"/\",\n      expires: drefresh,\n      httpOnly: true,\n      secure: true,\n      sameSite: true,\n    });\n    return newojtoken.token;\n  }\n  cookie.set(\"token\", \"\", {\n    path: \"/\",\n    httpOnly: true,\n    secure: true,\n    sameSite: true,\n  });\n  cookie.set(\"refreshtoken\", \"\", {\n    path: \"/\",\n    httpOnly: true,\n    secure: true,\n    sameSite: true,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}