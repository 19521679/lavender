{"ast":null,"code":"import * as loginApi from \"../../apis/login\";\nimport * as loginConst from \"../constrants/loginConst\";\nimport Cookies from 'js-cookie';\nimport jwt from 'jwt-decode';\nimport cookie from 'react-cookie';\nexport const postLogin = () => {\n  return {\n    type: loginConst.POST_LOGIN\n  };\n};\nexport const postLoginSuccess = data => {\n  return {\n    type: loginConst.POST_LOGIN_SUCCESS,\n    payload: {\n      data: data\n    }\n  };\n};\nexport const postLoginFailed = error => {\n  return {\n    type: loginConst.POST_LOGIN_FAILED,\n    payload: {\n      error\n    }\n  };\n};\nexport const postLoginReport = req => {\n  return async dispatch => {\n    await loginApi.login({\n      \"email\": \"19521679@gm.uit.edu.vn\",\n      \"password\": \"1\"\n    }).then(success => {\n      if (success.status === 200) {\n        dispatch(postLoginSuccess(success.data)); // const token = success.data;\n        // const user = jwt(token); // decode your token here\n\n        let d = new Date();\n        d.setTime(d.getTime() + 10 * 60 * 1000);\n        cookie.set(\"onboarded\", true, {\n          path: \"/\",\n          expires: d\n        });\n        console.log(\"onboarded\" + cookie.get(\"onboarded\"));\n      } else dispatch(postLoginFailed(success));\n    }).catch(error => {\n      dispatch(postLoginFailed(error));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/khanhle/Documents/GitHub/web/lavender/src/Components/redux/actions/loginAct.js"],"names":["loginApi","loginConst","Cookies","jwt","cookie","postLogin","type","POST_LOGIN","postLoginSuccess","data","POST_LOGIN_SUCCESS","payload","postLoginFailed","error","POST_LOGIN_FAILED","postLoginReport","req","dispatch","login","then","success","status","d","Date","setTime","getTime","set","path","expires","console","log","get","catch"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,kBAA1B;AACA,OAAO,KAAKC,UAAZ,MAA4B,0BAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEL,UAAU,CAACM;AADZ,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,IAAU;AACxC,SAAO;AACLH,IAAAA,IAAI,EAAEL,UAAU,CAACS,kBADZ;AAELC,IAAAA,OAAO,EAAE;AACPF,MAAAA,IAAI,EAACA;AADE;AAFJ,GAAP;AAMD,CAPM;AASP,OAAO,MAAMG,eAAe,GAAIC,KAAD,IAAW;AACxC,SAAO;AACLP,IAAAA,IAAI,EAAEL,UAAU,CAACa,iBADZ;AAELH,IAAAA,OAAO,EAAE;AACPE,MAAAA;AADO;AAFJ,GAAP;AAMD,CAPM;AASP,OAAO,MAAME,eAAe,GAAKC,GAAD,IAAS;AACvC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMjB,QAAQ,CACXkB,KADG,CACG;AACL,eAAQ,wBADH;AAEL,kBAAW;AAFN,KADH,EAKHC,IALG,CAKGC,OAAD,IAAa;AACjB,UAAIA,OAAO,CAACC,MAAR,KAAiB,GAArB,EACA;AAACJ,QAAAA,QAAQ,CAACT,gBAAgB,CAACY,OAAO,CAACX,IAAT,CAAjB,CAAR,CAAD,CACE;AACA;;AAEA,YAAIa,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACAD,QAAAA,CAAC,CAACE,OAAF,CAAUF,CAAC,CAACG,OAAF,KAAe,KAAG,EAAH,GAAM,IAA/B;AAEArB,QAAAA,MAAM,CAACsB,GAAP,CAAW,WAAX,EAAwB,IAAxB,EAA8B;AAACC,UAAAA,IAAI,EAAE,GAAP;AAAYC,UAAAA,OAAO,EAAEN;AAArB,SAA9B;AACDO,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAY1B,MAAM,CAAC2B,GAAP,CAAW,WAAX,CAAxB;AAEA,OAXD,MAYKd,QAAQ,CAACL,eAAe,CAACQ,OAAD,CAAhB,CAAR;AACN,KAnBG,EAoBHY,KApBG,CAoBInB,KAAD,IAAW;AAChBI,MAAAA,QAAQ,CAACL,eAAe,CAACC,KAAD,CAAhB,CAAR;AACD,KAtBG,CAAN;AAuBD,GAxBD;AAyBD,CA1BM","sourcesContent":["import * as loginApi from \"../../apis/login\";\nimport * as loginConst from \"../constrants/loginConst\";\nimport Cookies from 'js-cookie';\nimport jwt from 'jwt-decode';\nimport cookie from 'react-cookie'\n\nexport const postLogin = () => {\n  return {\n    type: loginConst.POST_LOGIN,\n  };\n};\n\nexport const postLoginSuccess = (data) => {\n  return {\n    type: loginConst.POST_LOGIN_SUCCESS,\n    payload: {\n      data:data,\n    },\n  };\n};\n\nexport const postLoginFailed = (error) => {\n  return {\n    type: loginConst.POST_LOGIN_FAILED,\n    payload: {\n      error,\n    },\n  };\n};\n\nexport const postLoginReport =  (req) => {\n  return async (dispatch) => {\n    await loginApi\n      .login({\n        \"email\":\"19521679@gm.uit.edu.vn\",\n        \"password\":\"1\"\n      })\n      .then((success) => {\n        if (success.status===200) \n        {dispatch(postLoginSuccess(success.data));\n          // const token = success.data;\n          // const user = jwt(token); // decode your token here\n\n          let d = new Date();\n          d.setTime(d.getTime() + (10*60*1000));\n        \n          cookie.set(\"onboarded\", true, {path: \"/\", expires: d});\n         console.log(\"onboarded\"+cookie.get(\"onboarded\"))\n          \n        }\n        else dispatch(postLoginFailed(success));\n      })\n      .catch((error) => {\n        dispatch(postLoginFailed(error));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}