{"ast":null,"code":"import * as loginConst from \"../constrants/loginConst\"; // import * as myToast from \"../../../Common/helper/toastHelper\";\n\nimport Cookies from \"universal-cookie\";\nconst cookie = new Cookies();\nconst initialState = {\n  makhachhang: undefined\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case loginConst.POST_LOGIN:\n      {\n        return { ...state,\n          makhachhang: action.payload.data.value.makhachhang\n        };\n      }\n\n    case loginConst.POST_LOGIN_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        let dtoken = new Date();\n        dtoken.setTime(dtoken.getTime() + 60 * 60 * 1000);\n        cookie.set(\"token\", data.value.token, {\n          path: \"/\",\n          expires: dtoken,\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n        let drefresh = new Date();\n        drefresh.setTime(drefresh.getTime() + 10 * 24 * 60 * 60 * 1000);\n        cookie.set(\"refreshtoken\", data.value.refreshtoken, {\n          path: \"/\",\n          expires: drefresh,\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n        return { ...state,\n          makhachhang: action.payload.data.value.makhachhang\n        };\n      }\n\n    case loginConst.POST_LOGIN_FAILED:\n      {\n        cookie.set(\"token\", \"\", {\n          path: \"/\",\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n        cookie.set(\"refreshtoken\", \"\", {\n          path: \"/\",\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n        return { ...state\n        };\n      }\n\n    /* Refresh*/\n\n    case loginConst.POST_REFRESH:\n      {\n        return { ...state,\n          makhachhang: action.payload.data.value.makhachhang\n        };\n      }\n\n    case loginConst.POST_REFRESH_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        let dtoken = new Date();\n        dtoken.setTime(dtoken.getTime() + 60 * 60 * 1000);\n        cookie.set(\"token\", data.value.token, {\n          path: \"/\",\n          expires: dtoken,\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n        console.log(\"newfrtoken\" + data.value.refreshtoken);\n        let drefresh = new Date();\n        drefresh.setTime(drefresh.getTime() + 10 * 24 * 60 * 60 * 1000);\n        cookie.set(\"refreshtoken\", data.value.refreshtoken, {\n          path: \"/\",\n          expires: drefresh,\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n        return { ...state,\n          makhachhang: action.payload.data.value.makhachhang\n        };\n      }\n\n    case loginConst.POST_REFRESH_FAILED:\n      {\n        cookie.set(\"token\", \"\", {\n          path: \"/\",\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n        cookie.set(\"refreshtoken\", \"\", {\n          path: \"/\",\n          httpOnly: true,\n          secure: true,\n          sameSite: true\n        });\n        return { ...state\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/khanhle/Documents/GitHub/web/lavender/src/Components/redux/reducers/login.js"],"names":["loginConst","Cookies","cookie","initialState","makhachhang","undefined","reducer","state","action","type","POST_LOGIN","payload","data","value","POST_LOGIN_SUCCESS","dtoken","Date","setTime","getTime","set","token","path","expires","httpOnly","secure","sameSite","drefresh","refreshtoken","POST_LOGIN_FAILED","POST_REFRESH","POST_REFRESH_SUCCESS","console","log","POST_REFRESH_FAILED"],"mappings":"AAAA,OAAO,KAAKA,UAAZ,MAA4B,0BAA5B,C,CACA;;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,MAAMC,MAAM,GAAG,IAAID,OAAJ,EAAf;AACA,MAAME,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAEC;AADM,CAArB;;AAGA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,UAAU,CAACU,UAAhB;AAA4B;AAC1B,eAAO,EACL,GAAGH,KADE;AAELH,UAAAA,WAAW,EAAEI,MAAM,CAACG,OAAP,CAAeC,IAAf,CAAoBC,KAApB,CAA0BT;AAFlC,SAAP;AAID;;AACD,SAAKJ,UAAU,CAACc,kBAAhB;AAAoC;AAClC,cAAM;AAAEF,UAAAA;AAAF,YAAWJ,MAAM,CAACG,OAAxB;AAEA,YAAII,MAAM,GAAG,IAAIC,IAAJ,EAAb;AACAD,QAAAA,MAAM,CAACE,OAAP,CAAeF,MAAM,CAACG,OAAP,KAAmB,KAAK,EAAL,GAAU,IAA5C;AACAhB,QAAAA,MAAM,CAACiB,GAAP,CAAW,OAAX,EAAoBP,IAAI,CAACC,KAAL,CAAWO,KAA/B,EAAsC;AACpCC,UAAAA,IAAI,EAAE,GAD8B;AAEpCC,UAAAA,OAAO,EAAEP,MAF2B;AAGpCQ,UAAAA,QAAQ,EAAE,IAH0B;AAIpCC,UAAAA,MAAM,EAAE,IAJ4B;AAKpCC,UAAAA,QAAQ,EAAE;AAL0B,SAAtC;AAQA,YAAIC,QAAQ,GAAG,IAAIV,IAAJ,EAAf;AACAU,QAAAA,QAAQ,CAACT,OAAT,CAAiBS,QAAQ,CAACR,OAAT,KAAqB,KAAK,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB,IAA1D;AACAhB,QAAAA,MAAM,CAACiB,GAAP,CAAW,cAAX,EAA2BP,IAAI,CAACC,KAAL,CAAWc,YAAtC,EAAoD;AAClDN,UAAAA,IAAI,EAAE,GAD4C;AAElDC,UAAAA,OAAO,EAAEI,QAFyC;AAGlDH,UAAAA,QAAQ,EAAE,IAHwC;AAIlDC,UAAAA,MAAM,EAAE,IAJ0C;AAKlDC,UAAAA,QAAQ,EAAE;AALwC,SAApD;AAOA,eAAO,EACL,GAAGlB,KADE;AAELH,UAAAA,WAAW,EAAEI,MAAM,CAACG,OAAP,CAAeC,IAAf,CAAoBC,KAApB,CAA0BT;AAFlC,SAAP;AAID;;AACD,SAAKJ,UAAU,CAAC4B,iBAAhB;AAAmC;AAEjC1B,QAAAA,MAAM,CAACiB,GAAP,CAAW,OAAX,EAAoB,EAApB,EAAwB;AACtBE,UAAAA,IAAI,EAAE,GADgB;AAEtBE,UAAAA,QAAQ,EAAE,IAFY;AAGtBC,UAAAA,MAAM,EAAE,IAHc;AAItBC,UAAAA,QAAQ,EAAE;AAJY,SAAxB;AAMAvB,QAAAA,MAAM,CAACiB,GAAP,CAAW,cAAX,EAA2B,EAA3B,EAA+B;AAC7BE,UAAAA,IAAI,EAAE,GADuB;AAE7BE,UAAAA,QAAQ,EAAE,IAFmB;AAG7BC,UAAAA,MAAM,EAAE,IAHqB;AAI7BC,UAAAA,QAAQ,EAAE;AAJmB,SAA/B;AAMA,eAAO,EACL,GAAGlB;AADE,SAAP;AAGD;;AACD;;AACA,SAAKP,UAAU,CAAC6B,YAAhB;AAA8B;AAC5B,eAAO,EACL,GAAGtB,KADE;AAELH,UAAAA,WAAW,EAAEI,MAAM,CAACG,OAAP,CAAeC,IAAf,CAAoBC,KAApB,CAA0BT;AAFlC,SAAP;AAID;;AACD,SAAKJ,UAAU,CAAC8B,oBAAhB;AAAsC;AACpC,cAAM;AAAElB,UAAAA;AAAF,YAAWJ,MAAM,CAACG,OAAxB;AACA,YAAII,MAAM,GAAG,IAAIC,IAAJ,EAAb;AACAD,QAAAA,MAAM,CAACE,OAAP,CAAeF,MAAM,CAACG,OAAP,KAAmB,KAAK,EAAL,GAAU,IAA5C;AACAhB,QAAAA,MAAM,CAACiB,GAAP,CAAW,OAAX,EAAoBP,IAAI,CAACC,KAAL,CAAWO,KAA/B,EAAsC;AACpCC,UAAAA,IAAI,EAAE,GAD8B;AAEpCC,UAAAA,OAAO,EAAEP,MAF2B;AAGpCQ,UAAAA,QAAQ,EAAE,IAH0B;AAIpCC,UAAAA,MAAM,EAAE,IAJ4B;AAKpCC,UAAAA,QAAQ,EAAE;AAL0B,SAAtC;AAQAM,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAapB,IAAI,CAACC,KAAL,CAAWc,YAApC;AAEA,YAAID,QAAQ,GAAG,IAAIV,IAAJ,EAAf;AACAU,QAAAA,QAAQ,CAACT,OAAT,CAAiBS,QAAQ,CAACR,OAAT,KAAqB,KAAK,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB,IAA1D;AACAhB,QAAAA,MAAM,CAACiB,GAAP,CAAW,cAAX,EAA2BP,IAAI,CAACC,KAAL,CAAWc,YAAtC,EAAoD;AAClDN,UAAAA,IAAI,EAAE,GAD4C;AAElDC,UAAAA,OAAO,EAAEI,QAFyC;AAGlDH,UAAAA,QAAQ,EAAE,IAHwC;AAIlDC,UAAAA,MAAM,EAAE,IAJ0C;AAKlDC,UAAAA,QAAQ,EAAE;AALwC,SAApD;AAOA,eAAO,EACL,GAAGlB,KADE;AAELH,UAAAA,WAAW,EAAEI,MAAM,CAACG,OAAP,CAAeC,IAAf,CAAoBC,KAApB,CAA0BT;AAFlC,SAAP;AAID;;AACD,SAAKJ,UAAU,CAACiC,mBAAhB;AAAqC;AACnC/B,QAAAA,MAAM,CAACiB,GAAP,CAAW,OAAX,EAAoB,EAApB,EAAwB;AACtBE,UAAAA,IAAI,EAAE,GADgB;AAEtBE,UAAAA,QAAQ,EAAE,IAFY;AAGtBC,UAAAA,MAAM,EAAE,IAHc;AAItBC,UAAAA,QAAQ,EAAE;AAJY,SAAxB;AAMAvB,QAAAA,MAAM,CAACiB,GAAP,CAAW,cAAX,EAA2B,EAA3B,EAA+B;AAC7BE,UAAAA,IAAI,EAAE,GADuB;AAE7BE,UAAAA,QAAQ,EAAE,IAFmB;AAG7BC,UAAAA,MAAM,EAAE,IAHqB;AAI7BC,UAAAA,QAAQ,EAAE;AAJmB,SAA/B;AAMA,eAAO,EACL,GAAGlB;AADE,SAAP;AAGD;;AACD;AACE,aAAOA,KAAP;AAzGJ;AA2GD,CA5GD;;AA6GA,eAAeD,OAAf","sourcesContent":["import * as loginConst from \"../constrants/loginConst\";\n// import * as myToast from \"../../../Common/helper/toastHelper\";\nimport Cookies from \"universal-cookie\";\nconst cookie = new Cookies();\nconst initialState = {\n  makhachhang: undefined,\n};\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case loginConst.POST_LOGIN: {\n      return {\n        ...state,\n        makhachhang: action.payload.data.value.makhachhang,\n      };\n    }\n    case loginConst.POST_LOGIN_SUCCESS: {\n      const { data } = action.payload;\n    \n      let dtoken = new Date();\n      dtoken.setTime(dtoken.getTime() + 60 * 60 * 1000);\n      cookie.set(\"token\", data.value.token, {\n        path: \"/\",\n        expires: dtoken,\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n\n      let drefresh = new Date();\n      drefresh.setTime(drefresh.getTime() + 10 * 24 * 60 * 60 * 1000);\n      cookie.set(\"refreshtoken\", data.value.refreshtoken, {\n        path: \"/\",\n        expires: drefresh,\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n      return {\n        ...state,\n        makhachhang: action.payload.data.value.makhachhang,\n      };\n    }\n    case loginConst.POST_LOGIN_FAILED: {\n      \n      cookie.set(\"token\", \"\", {\n        path: \"/\",\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n      cookie.set(\"refreshtoken\", \"\", {\n        path: \"/\",\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n      return {\n        ...state,\n      };\n    }\n    /* Refresh*/\n    case loginConst.POST_REFRESH: {\n      return {\n        ...state,\n        makhachhang: action.payload.data.value.makhachhang,\n      };\n    }\n    case loginConst.POST_REFRESH_SUCCESS: {\n      const { data } = action.payload;\n      let dtoken = new Date();\n      dtoken.setTime(dtoken.getTime() + 60 * 60 * 1000);\n      cookie.set(\"token\", data.value.token, {\n        path: \"/\",\n        expires: dtoken,\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n\n      console.log(\"newfrtoken\"+data.value.refreshtoken)\n\n      let drefresh = new Date();\n      drefresh.setTime(drefresh.getTime() + 10 * 24 * 60 * 60 * 1000);\n      cookie.set(\"refreshtoken\", data.value.refreshtoken, {\n        path: \"/\",\n        expires: drefresh,\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n      return {\n        ...state,\n        makhachhang: action.payload.data.value.makhachhang,\n      };\n    }\n    case loginConst.POST_REFRESH_FAILED: {\n      cookie.set(\"token\", \"\", {\n        path: \"/\",\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n      cookie.set(\"refreshtoken\", \"\", {\n        path: \"/\",\n        httpOnly: true,\n        secure: true,\n        sameSite: true,\n      });\n      return {\n        ...state,\n      };\n    }\n    default:\n      return state;\n  }\n};\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}