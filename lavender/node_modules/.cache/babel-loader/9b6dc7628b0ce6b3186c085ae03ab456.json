{"ast":null,"code":"import * as loginApi from \"../../apis/login\";\nimport * as loginConst from \"../constrants/loginConst\";\nimport jwt from \"jwt-decode\";\nimport cookie from \"react-cookie\";\nexport const postLogin = () => {\n  return {\n    type: loginConst.POST_LOGIN\n  };\n};\nexport const postLoginSuccess = data => {\n  return {\n    type: loginConst.POST_LOGIN_SUCCESS,\n    payload: {\n      data: data\n    }\n  };\n};\nexport const postLoginFailed = error => {\n  return {\n    type: loginConst.POST_LOGIN_FAILED,\n    payload: {\n      error\n    }\n  };\n};\nexport const postLoginReport = req => {\n  return async dispatch => {\n    await loginApi.login({\n      email: \"19521679@gm.uit.edu.vn\",\n      password: \"1\"\n    }).then(success => {\n      if (success.status === 200) {\n        dispatch(postLoginSuccess(success.data)); // const token = success.data;\n        // const user = jwt(token); // decode your token here\n      } else dispatch(postLoginFailed(success));\n    }).catch(error => {\n      dispatch(postLoginFailed(error));\n    });\n    let d = new Date();\n    d.setTime(d.getTime() + 60 * 60 * 1000);\n    cookie.set(\"token\", true, {\n      path: \"/\",\n      expires: d\n    });\n    var token = cookie.get(\"token\");\n    loginApi.test({\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/khanhle/Documents/GitHub/web/lavender/src/Components/redux/actions/loginAct.js"],"names":["loginApi","loginConst","jwt","cookie","postLogin","type","POST_LOGIN","postLoginSuccess","data","POST_LOGIN_SUCCESS","payload","postLoginFailed","error","POST_LOGIN_FAILED","postLoginReport","req","dispatch","login","email","password","then","success","status","catch","d","Date","setTime","getTime","set","path","expires","token","get","test","headers","Authorization"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,kBAA1B;AACA,OAAO,KAAKC,UAAZ,MAA4B,0BAA5B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEJ,UAAU,CAACK;AADZ,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,IAAU;AACxC,SAAO;AACLH,IAAAA,IAAI,EAAEJ,UAAU,CAACQ,kBADZ;AAELC,IAAAA,OAAO,EAAE;AACPF,MAAAA,IAAI,EAAEA;AADC;AAFJ,GAAP;AAMD,CAPM;AASP,OAAO,MAAMG,eAAe,GAAIC,KAAD,IAAW;AACxC,SAAO;AACLP,IAAAA,IAAI,EAAEJ,UAAU,CAACY,iBADZ;AAELH,IAAAA,OAAO,EAAE;AACPE,MAAAA;AADO;AAFJ,GAAP;AAMD,CAPM;AASP,OAAO,MAAME,eAAe,GAAIC,GAAD,IAAS;AACtC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMhB,QAAQ,CACXiB,KADG,CACG;AACLC,MAAAA,KAAK,EAAE,wBADF;AAELC,MAAAA,QAAQ,EAAE;AAFL,KADH,EAKHC,IALG,CAKGC,OAAD,IAAa;AACjB,UAAIA,OAAO,CAACC,MAAR,KAAmB,GAAvB,EAA4B;AAC1BN,QAAAA,QAAQ,CAACT,gBAAgB,CAACc,OAAO,CAACb,IAAT,CAAjB,CAAR,CAD0B,CAE1B;AACA;AACD,OAJD,MAIOQ,QAAQ,CAACL,eAAe,CAACU,OAAD,CAAhB,CAAR;AACR,KAXG,EAYHE,KAZG,CAYIX,KAAD,IAAW;AAChBI,MAAAA,QAAQ,CAACL,eAAe,CAACC,KAAD,CAAhB,CAAR;AACD,KAdG,CAAN;AAgBA,QAAIY,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACAD,IAAAA,CAAC,CAACE,OAAF,CAAUF,CAAC,CAACG,OAAF,KAAc,KAAK,EAAL,GAAU,IAAlC;AAEAxB,IAAAA,MAAM,CAACyB,GAAP,CAAW,OAAX,EAAoB,IAApB,EAA0B;AAAEC,MAAAA,IAAI,EAAE,GAAR;AAAaC,MAAAA,OAAO,EAAEN;AAAtB,KAA1B;AACA,QAAIO,KAAK,GAAG5B,MAAM,CAAC6B,GAAP,CAAW,OAAX,CAAZ;AACAhC,IAAAA,QAAQ,CAACiC,IAAT,CAAc;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASJ,KAAM;AAAjC;AAAX,KAAd;AACD,GAvBD;AAwBD,CAzBM","sourcesContent":["import * as loginApi from \"../../apis/login\";\nimport * as loginConst from \"../constrants/loginConst\";\nimport jwt from \"jwt-decode\";\nimport cookie from \"react-cookie\";\n\nexport const postLogin = () => {\n  return {\n    type: loginConst.POST_LOGIN,\n  };\n};\n\nexport const postLoginSuccess = (data) => {\n  return {\n    type: loginConst.POST_LOGIN_SUCCESS,\n    payload: {\n      data: data,\n    },\n  };\n};\n\nexport const postLoginFailed = (error) => {\n  return {\n    type: loginConst.POST_LOGIN_FAILED,\n    payload: {\n      error,\n    },\n  };\n};\n\nexport const postLoginReport = (req) => {\n  return async (dispatch) => {\n    await loginApi\n      .login({\n        email: \"19521679@gm.uit.edu.vn\",\n        password: \"1\",\n      })\n      .then((success) => {\n        if (success.status === 200) {\n          dispatch(postLoginSuccess(success.data));\n          // const token = success.data;\n          // const user = jwt(token); // decode your token here\n        } else dispatch(postLoginFailed(success));\n      })\n      .catch((error) => {\n        dispatch(postLoginFailed(error));\n      });\n\n    let d = new Date();\n    d.setTime(d.getTime() + 60 * 60 * 1000);\n\n    cookie.set(\"token\", true, { path: \"/\", expires: d });\n    var token = cookie.get(\"token\");\n    loginApi.test({ headers: { Authorization: `Bearer ${token}` } });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}